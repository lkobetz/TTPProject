{"version":3,"sources":["Login.js","App.js","NavBar.js","SingleStock.js","StockPortfolio.js","BuyStockForm.js","UserPortfolio.js","UserTransactions.js","routes.js","serviceWorker.js","index.js"],"names":["Login","props","state","name","email","password","onSubmit","this","handleSubmit","bind","method","className","type","value","placeholder","onChange","onNameChange","aria-describedby","onEmailChange","onPasswordChange","event","setState","target","preventDefault","userType","axios","post","response","resetForm","status","id","data","window","sessionStorage","setItem","changeUser","message","React","Component","App","toggle","user","loggedInUser","onClick","toggleFunc","to","pathname","NavBar","url","page","location","href","toString","slice","indexOf","get","getItem","params","style","textDecoration","color","SingleStock","ticker","stock","parseInt","price","quantity","stockCost","getTotalCostOfStock","StockPortfolio","transactions","map","key","BuyStockForm","cash","onTickerChange","onQuantityChange","contains","i","length","put","userId","UserPortfolio","totalsOfEach","forEach","push","reduce","first","second","getPriceOfAllStocks","UserTransactions","Routes","exact","path","component","withRouter","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.456dc58f.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      email: \"\",\n      password: \"\"\n    };\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\n        <div>\n          <input\n            className={\"form_item\"}\n            type=\"text\"\n            value={this.state.name}\n            placeholder={\"Name\"}\n            onChange={this.onNameChange.bind(this)}\n          />\n        </div>\n        <br />\n        <div>\n          <input\n            className={\"form_item\"}\n            type=\"email\"\n            aria-describedby=\"emailHelp\"\n            value={this.state.email}\n            placeholder={\"Email\"}\n            onChange={this.onEmailChange.bind(this)}\n          />\n        </div>{\" \"}\n        <br />\n        <div>\n          <input\n            className={\"form_item\"}\n            type=\"password\"\n            value={this.state.password}\n            placeholder={\"Password\"}\n            onChange={this.onPasswordChange.bind(this)}\n          />\n        </div>\n        <br />\n        <button type=\"submit\" className=\"submit_button\">\n          Submit\n        </button>\n      </form>\n    );\n  }\n  onNameChange(event) {\n    this.setState({ name: event.target.value });\n  }\n\n  onEmailChange(event) {\n    this.setState({ email: event.target.value });\n  }\n\n  onPasswordChange(event) {\n    this.setState({ password: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    if (this.props.userType === \"new\") {\n      const response = await axios.post(\"/api/register\", this.state);\n      this.resetForm();\n      if (response.status === 200) {\n        const id = response.data.id;\n        await window.sessionStorage.setItem(\"userId\", id);\n        this.props.changeUser(response.data);\n      }\n    } else if (this.props.userType === \"existing\") {\n      const response = await axios.post(\"/api/login\", this.state);\n      this.resetForm();\n      if (response.status === 200) {\n        const id = response.data.id;\n        await window.sessionStorage.setItem(\"userId\", id);\n        this.props.changeUser(response.data);\n      }\n    }\n  }\n  resetForm() {\n    this.setState({ name: \"\", email: \"\", message: \"\" });\n  }\n}\n\nexport default Login;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Redirect } from \"react-router-dom\";\nimport Login from \"./Login\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggle: false,\n      userType: \"\",\n      user: null\n    };\n    this.changeUser = this.changeUser.bind(this);\n  }\n  toggleFunc(user) {\n    this.setState({ toggle: !this.state.toggle });\n    this.setState({ userType: user });\n  }\n  changeUser(loggedInUser) {\n    this.setState({ user: loggedInUser });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <button onClick={() => this.toggleFunc(\"new\")}>Register</button>\n        <button onClick={() => this.toggleFunc(\"existing\")}>Login</button>\n        {this.state.toggle && (\n          <Login userType={this.state.userType} changeUser={this.changeUser} />\n        )}\n        {this.state.user && (\n          <Redirect\n            to={{\n              pathname: `/${this.state.user.id}`,\n              state: { user: this.state.user }\n            }}\n          ></Redirect>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      url: \"\",\n      user: null\n    };\n  }\n  async componentDidMount() {\n    let page = window.location.href.toString();\n    page = page.slice(page.indexOf(\"#\") + 2);\n    this.setState({ url: page });\n    const { data } = await axios.get(\n      `/api/${window.sessionStorage.getItem(\"userId\")}`\n    );\n    this.setState({ user: data });\n  }\n  getUser;\n  render() {\n    return (\n      <div id={\"navbar\"}>\n        {this.state.user && (\n          <nav id=\"navbar\">\n            <Link\n              className={\"navbar_link\"}\n              params={\"userPortfolio\"}\n              to={`/${this.state.user.id}`}\n              style={{\n                textDecoration: \"none\",\n                color:\n                  this.state.url === `${this.state.user.id}`\n                    ? \"#6600ff\"\n                    : \"black\"\n              }}\n            >\n              <h5>Portfolio</h5>\n            </Link>{\" \"}\n            <Link\n              className={\"navbar_link\"}\n              params={\"userTransactions\"}\n              to={`/${this.state.user.id}/transactions`}\n              style={{\n                textDecoration: \"none\",\n                color:\n                  this.state.url === `${this.state.user.id}/transactions`\n                    ? \"#6600ff\"\n                    : \"black\"\n              }}\n            >\n              <h5>Transactions</h5>\n            </Link>\n          </nav>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","import React from \"react\";\n// import axios from \"axios\";\n\nclass SingleStock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: this.props.user,\n      ticker: this.props.stock.name\n    };\n  }\n  getTotalCostOfStock() {\n    // I couldn't get this api call to work even though it worked in postman\n    // const { data } = await axios.get(\n    //   `/api/${this.state.user.id}/apicall`,\n    //   this.state\n    // );\n    // if (data.latestPrice) {\n    //   return data.latestPrice * this.props.stock.quantity;\n    // } else {\n    return (\n      parseInt(this.props.stock.price) * parseInt(this.props.stock.quantity)\n    );\n    // }\n  }\n  render() {\n    const stockCost = this.getTotalCostOfStock();\n    return (\n      <div id=\"stock_container\">\n        <div className={\"stock\"}>\n          <h3 className={\"stock_item\"}>{this.props.stock.name}</h3>\n          <h3 className={\"stock_item\"}>{this.props.stock.quantity} Shares</h3>\n          <h3 className={\"stock_item\"}>=</h3>\n          <h3 className={\"stock_item\"}>${stockCost}</h3>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SingleStock;\n","import React from \"react\";\nimport axios from \"axios\";\nimport SingleStock from \"./SingleStock\";\n\nclass StockPortfolio extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    };\n  }\n  async componentDidMount() {\n    const { data } = await axios.get(\n      `/api/${window.sessionStorage.getItem(\"userId\")}`\n    );\n    this.setState({ user: data });\n  }\n  render() {\n    return (\n      <div className={\"portfolio_item\"}>\n        {this.state.user && (\n          <div id={\"stock_list\"}>\n            {this.state.user.transactions.map(stock => (\n              <SingleStock\n                stock={stock}\n                user={this.state.user}\n                key={stock.id}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default StockPortfolio;\n","import React from \"react\";\nimport axios from \"axios\";\n\nclass BuyStockForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ticker: \"\",\n      quantity: 0,\n      price: 0,\n      user: null\n    };\n  }\n  async componentDidMount() {\n    const { data } = await axios.get(\n      `/api/${window.sessionStorage.getItem(\"userId\")}`\n    );\n    this.setState({ user: data });\n  }\n  render() {\n    return (\n      <form\n        className={\"portfolio_item\"}\n        onSubmit={this.handleSubmit.bind(this)}\n        method=\"POST\"\n      >\n        <div>\n          {this.state.user && <h3>Cash: ${this.state.user.cash}</h3>}\n          <input\n            className={\"form_item\"}\n            type=\"text\"\n            value={this.state.ticker}\n            placeholder={\"Ticker Symbol\"}\n            onChange={this.onTickerChange.bind(this)}\n          />\n        </div>\n        <br />\n        <div>\n          <input\n            className={\"form_item\"}\n            type=\"text\"\n            value={this.state.quantity}\n            placeholder={\"Quantity\"}\n            onChange={this.onQuantityChange.bind(this)}\n          />\n        </div>{\" \"}\n        <br />\n        <button type=\"submit\" className=\"submit_button\">\n          Buy\n        </button>\n      </form>\n    );\n  }\n\n  onTickerChange(event) {\n    this.setState({ ticker: event.target.value });\n  }\n\n  onQuantityChange(event) {\n    this.setState({ quantity: event.target.value });\n  }\n\n  async handleSubmit(event) {\n    // add an axios.put to handle the payment\n    event.preventDefault();\n    let contains = false;\n    for (let i = 0; i < this.state.user.transactions.length; i++) {\n      if (this.state.user.transactions[i].name === this.state.ticker) {\n        contains = true;\n      }\n    }\n    if (contains) {\n      const response = await axios.put(`/api/${this.props.userId}`, this.state);\n    } else {\n      const response = await axios.post(\n        `/api/${this.props.userId}`,\n        this.state\n      );\n    }\n    this.resetForm();\n  }\n  resetForm() {\n    this.setState({ ticker: \"\", quantity: 0 });\n  }\n}\n\nexport default BuyStockForm;\n","import React from \"react\";\nimport axios from \"axios\";\nimport NavBar from \"./NavBar\";\nimport StockPortfolio from \"./StockPortfolio\";\nimport BuyStockForm from \"./BuyStockForm\";\n\nclass UserPortfolio extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    };\n  }\n  async componentDidMount() {\n    const { data } = await axios.get(\n      `/api/${window.sessionStorage.getItem(\"userId\")}`\n    );\n    this.setState({ user: data });\n  }\n  getPriceOfAllStocks() {\n    let totalsOfEach = [];\n    this.state.user.transactions.forEach(stock => {\n      totalsOfEach.push(stock.price * stock.quantity);\n    });\n    return totalsOfEach.reduce((first, second) => {\n      return (first += second);\n    });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.user && (\n          <div>\n            <NavBar />\n            <div id={\"portfolio_container\"}>\n              <h1 id={\"portfolio_header\"}>\n                Total Value of My Stocks: {this.getPriceOfAllStocks()}\n              </h1>\n              <div id={\"portfolio_body\"}>\n                <StockPortfolio />\n                <BuyStockForm userId={this.state.user.id} />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UserPortfolio;\n","import React from \"react\";\nimport axios from \"axios\";\nimport NavBar from \"./NavBar\";\n\nclass UserTransactions extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null\n    };\n  }\n  async componentDidMount() {\n    const { data } = await axios.get(\n      `/api/${window.sessionStorage.getItem(\"userId\")}`\n    );\n    this.setState({ user: data });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.user && (\n          <div>\n            <NavBar />\n            <div id={\"portfolio_container\"}>\n              <div id={\"portfolio_body\"}>\n                <div id={\"transaction_container\"}>\n                  <h2 id={\"transactions_list\"}>Transaction History:</h2>\n                  {this.state.user && (\n                    <div>\n                      {this.state.user.transactions.map(stock => (\n                        <div className={\"stock\"}>\n                          <h3 className={\"stock_item\"}>BUY</h3>\n                          <h3 className={\"stock_item\"}>{stock.name}</h3>\n                          <h3 className={\"stock_item\"}>\n                            Shares: {stock.quantity}\n                          </h3>\n                          <h3 className={\"stock_item\"}>@</h3>\n                          <h3 className={\"stock_item\"}>${stock.price}</h3>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default UserTransactions;\n","import React, { Component } from \"react\";\nimport { withRouter, Route, Switch } from \"react-router-dom\";\n// import PropTypes from \"prop-types\";\nimport App from \"./App\";\nimport UserPortfolio from \"./UserPortfolio\";\nimport UserTransactions from \"./UserTransactions\";\n\nexport default class Routes extends Component {\n  componentDidMount() {}\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={withRouter(App)} />\n        <Route exact path=\"/:id\" component={withRouter(UserPortfolio)} />\n        <Route\n          exact\n          path=\"/:id/transactions\"\n          component={withRouter(UserTransactions)}\n        />\n      </Switch>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Routes from \"./routes\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <Routes />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}