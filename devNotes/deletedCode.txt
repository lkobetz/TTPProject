// this 'listens' for the state change in UserPortfolio and rerenders this component if a new transaction has been made

  // async componentDidUpdate(prevProps, prevState) {
  //   const { data } = await axios.get(
  //     `/api/${window.sessionStorage.getItem("userId")}`
  //   );
  //   const newTransaction = JSON.stringify(
  //     data.transactions[this.state.user.transactions.length - 1]
  //   );
  //   if (prevState.user) {
  //     const lastTransaction = JSON.stringify(
  //       prevState.user.transactions[this.state.user.transactions.length - 1]
  //     );
  //     if (prevState.user && lastTransaction !== newTransaction) {
  //       this.setState({ user: data });
  //     } else {
  //       return false;
  //     }
  //   }
  // }

  // making API calls in componentDidUpdate results in a billion api calls
  // try making request to user's data instead?
  // async componentDidUpdate(prevProps, prevState) {
  //   console.log(this.state.latestPrice);
  //   const newTransaction = JSON.stringify(
  //     this.state.user.transactions[this.state.user.transactions.length - 1]
  //   );
  //   if (prevProps.user) {
  //     const lastTransaction = JSON.stringify(
  //       prevProps.user.transactions[this.state.user.transactions.length - 1]
  //     );
  //     const newPrice = await this.callApi();
  //     console.log("newPrice from componentDidUpdate:", newPrice);
  //     if (prevProps.user && lastTransaction !== newTransaction && newPrice) {
  //       this.setState({
  //         latestPrice: (newPrice * this.props.stock.quantity).toFixed(2)
  //       });
  //     } else {
  //       return false;
  //     }
  //   }
  // }

  from main.js (former entry point):
  // const db = require("./db/db.js");
// const app = require(".");
// const PORT = process.env.PORT || 1337;

// const syncDb = () => db.sync();

// async function bootApp() {
//   await sessionStore.sync();
//   await syncDb;
//   console.log("db synced");
//   app.listen(PORT, () =>
//     console.log(`studiously serving silly sounds on port ${PORT}`)
//   );
// }
// bootApp();

// previous version:
// db.sync() // if you update your db schemas, make sure you drop the tables first and then recreate them
//   .then(() => {
//     console.log("db synced");
//     app.listen(PORT, () =>
//       console.log(`studiously serving silly sounds on port ${PORT}`)
//     );
//   });
